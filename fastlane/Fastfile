#!/usr/bin/env groovy
#
#   Fastfile
#   sImageViewer
#   Created by Duncan Wallace 08/21/2020
#   Copyright Â© 2020. Duncwa LLC.  All rights reserved

require_relative "functions/readable_time"

default_platform(:ios)
platform :ios do

  desc "Upload dsyms and ipa results from dev builds"
  lane :appcenter_upload_dev do
    appcenter_upload(
      api_token: ENV["APPCENTER_TOKEN_DLO"],
      owner_name: ENV["APPCENTER_ORG"],
      owner_type: "organization", # Default is user - set to organization for appcenter organizations
      app_name: ENV["APPCENTER_DEV_APP_NAME"],
      notify_testers: true, # Set to false if you don't want to notify testers of your new release (default: `false`)
      file: "fastlane/build/FastImageViewer.ipa",
      build_number: ENV["APPCENTER_DISTRIBUTE_BUILD_NUMBER"],
      version: ENV["APPCENTER_DISTRIBUTE_VERSION"],
      app_platform: "ios",
      app_os: "iOS"
    )
  end

  desc "Upload dsyms and ipa results from rls builds"
  lane :appcenter_upload_rls do
    appcenter_upload(
      api_token: ENV["APPCENTER_TOKEN_DLO"],
      owner_name: ENV["APPCENTER_ORG"],
      owner_type: "organization", # Default is user - set to organization for appcenter organizations
      app_name: ENV["APPCENTER_RLS_APP_NAME"],
      notify_testers: true, # Set to false if you don't want to notify testers of your new release (default: `false`)
      file: "fastlane/build/FastImageViewer.ipa",
      dsym: ENV["APPCENTER_DISTRIBUTE_DSYM"],
      build_number: ENV["APPCENTER_DISTRIBUTE_BUILD_NUMBER"],
      version: ENV["APPCENTER_DISTRIBUTE_VERSION"],
      app_platform: "ios",
      app_os: "iOS"
    )
  end

  desc "publish dev builds"
  lane :publish_dev_ipa do
    generate_dev_ipa
    appcenter_upload_dev
  end


  desc "Publish rls builds"
  lane :publish_rls_ipa do
    generate_rls_ipa
    appcenter_upload_rls
  end

  desc "Run unit tests for sFastIcon iOS App"
  lane :generate_rls_ipa do
    build_app(
      codesigning_identity: "Apple Distribution",
      clean: true,
      scheme: "sFastIcon",
      configuration: "Release",
      export_options: {
        method: "app-store",
        provisioningProfiles: {
          "com.dw4workonly.fastimage" => "DIS_SwiftImageViewer"
        }
      },
      include_bitcode: true,
      include_symbols: true,
      derived_data_path: "fastlane/build",
      output_directory: "fastlane/build"
    )
  end

  lane :generate_dev_ipa do
    build_app(
      codesigning_identity: "Apple Development",
      clean: true,
      scheme: "sFastIcon",
      configuration: "Debug",
      export_options: {
        method: "development",
        provisioningProfiles: {
          "com.dw4workonly.fastimage" => "DEV_SwiftImageViewer"
        }
      },
      include_bitcode: false,
      include_symbols: true,
      derived_data_path: "fastlane/build",
      output_directory: "fastlane/build"
    )
  end

  desc "Run unit tests for sFastIcon iOS App"
  lane :test_ios_pra do
    run_tests(
      device: "iPhone 8",
      scheme: "sFastIconUnitTests",
      code_coverage: true,
      output_directory: "fastlane/test_output",
      result_bundle: true,
      skip_slack: true
    )
  end

  desc "Run simulator tests for sFastIcon iOS App"
  lane :test_ios_qe do
    run_tests(
      device: "iPhone 8",
      scheme: "sFastIconUITests",
      code_coverage: true,
      output_directory: "fastlane/test_output",
      formatter: "xcpretty-json-formatter",
      skip_slack: true
    )
  end

  desc "Run simulator tests for sFastIcon iOS App"
  lane :run_ios_ins do
    build_app(
      codesigning_identity: "Apple Development",
      clean: true,
      scheme: "sFastIcon",
      configuration: "Debug",
      export_options: {
        method: "development",
        provisioningProfiles: {
          "com.dw4workonly.fastimage" => "DEV_SwiftImageViewer"
        }
      },
      include_bitcode: false
    )
    ## Call inspection bulkextractor on *.ipa file
    sh 'echo "Running Bulkextractor inspection"'
  end

  desc "Generate new localized screenshots for sFastIcon"
  lane :screenshots do
    capture_screenshots(
      devices: ["iPhone 8"],
      scheme: "sFastIconUITests"
    )
  end

  desc "Run Danger for PRA Commit to Repo Comments"
  lane :ios_danger do
    sh 'bundle exec danger --dangerfile=ios_dangerfile'
  end

  desc "Run Slack Testing"
  lane :slack_test do
    build_url = "http://mobileci-prod.local:8080/job/Consumer/job/ImageViewer/job/ImageViewerios/job/PRA/job/IMG-IOS-PRA/201/"
    job_base_name = "IMG-IOS-PRA"
    build_id = "1"
    run_time = to_clock(4200)
    status = "SUCCESS"
    result = status == "SUCCESS" ? " ðŸš€ finished in" : " ðŸ’£ðŸ’¥failed after "
    message = "*#{status} - <#{build_url}|#{job_base_name} Build ##{build_id}> #{result} #{run_time}*"
    slack(
      channel: ENV["SLACK_CHANNEL"],
      message: message,
      username: "cicdbuild",
      success: status,
      default_payloads: []
    )
  end

  desc "Run Slack reporting for PRA"
  lane :post_pra_slack_message do |options|
    build_url = ENV["BUILD_URL"]
    job_base_name = ENV["JOB_BASE_NAME"]
    build_id = ENV["BUILD_ID"]
    run_time = to_clock(options[:run_time])
    status = options[:status]
    result = status == "SUCCESS" ? " ðŸš€ finished in" : " ðŸ’£ðŸ’¥failed after "
    message = "*#{status} - <#{build_url}|#{job_base_name} Build ##{build_id}> #{result} #{run_time}*"
    slack(
      channel: ENV["SLACK_CHANNEL"],
      message: message,
      username: "cicdbuild",
      success: status,
      default_payloads: []
    )
  end

  desc "Run Slack reporting for DEV"
  lane :post_dev_slack_message do |options|
    build_url = ENV["BUILD_URL"]
    job_base_name = ENV["JOB_BASE_NAME"]
    build_id = ENV["BUILD_ID"]
    run_time = to_clock(options[:run_time])
    status = options[:status]
    result = status == "SUCCESS" ? " ðŸš€ finished in" : " ðŸ’£ðŸ’¥failed after "
    message = "*#{status} - <#{build_url}|#{job_base_name} Build ##{build_id}> #{result} #{run_time}*"
    slack(
      channel: ENV["SLACK_CHANNEL"],
      message: message,
      username: "cicdbuild",
      success: status,
      default_payloads: []
    )
  end

  desc "Run Slack reporting for RLS"
  lane :post_rls_slack_message do |options|
    build_url = ENV["BUILD_URL"]
    job_base_name = ENV["JOB_BASE_NAME"]
    build_id = ENV["BUILD_ID"]
    run_time = to_clock(options[:run_time])
    status = options[:status]
    result = status == "SUCCESS" ? " ðŸš€ finished in" : " ðŸ’£ðŸ’¥failed after "
    message = "*#{status} - <#{build_url}|#{job_base_name} Build ##{build_id}> #{result} #{run_time}*"
    slack(
      channel: ENV["SLACK_CHANNEL"],
      message: message,
      username: "cicdbuild",
      success: status,
      default_payloads: []
    )
  end
end
