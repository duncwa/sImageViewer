#!/usr/bin/env groovy
#
#   Fastfile
#   sImageViewer
#   Created by Duncan Wallace 08/21/2020
#   Copyright Â© 2020. Duncwa LLC.  All rights reserved

require_relative "functions/readable_time"
require_relative "functions/nilerize"

default_platform(:ios)
platform :ios do

  desc "Upload dsyms and ipa results from dev builds"
  lane :appcenter_upload_dev do
    appcenter_upload(
      api_token: ENV["APPCENTER_TOKEN_DLO"],
      owner_name: ENV["APPCENTER_ORG"],
      owner_type: "organization", # Default is user - set to organization for appcenter organizations
      app_name: ENV["APPCENTER_DEV_APP_NAME"],
      notify_testers: true, # Set to false if you don't want to notify testers of your new release (default: `false`)
      file: "fastlane/build/FastImageViewer.ipa",
      build_number: ENV["APPCENTER_DISTRIBUTE_BUILD_NUMBER"],
      version: ENV["APPCENTER_DISTRIBUTE_VERSION"],
      app_platform: "ios",
      app_os: "iOS"
    )
  end

  desc "Upload dsyms and ipa results from rls builds"
  lane :appcenter_upload_rls do
    appcenter_upload(
      api_token: ENV["APPCENTER_TOKEN_DLO"],
      owner_name: ENV["APPCENTER_ORG"],
      owner_type: "organization", # Default is user - set to organization for appcenter organizations
      app_name: ENV["APPCENTER_RLS_APP_NAME"],
      notify_testers: true, # Set to false if you don't want to notify testers of your new release (default: `false`)
      file: "fastlane/build/FastImageViewer.ipa",
      dsym: ENV["APPCENTER_DISTRIBUTE_DSYM"],
      build_number: ENV["APPCENTER_DISTRIBUTE_BUILD_NUMBER"],
      version: ENV["APPCENTER_DISTRIBUTE_VERSION"],
      app_platform: "ios",
      app_os: "iOS"
    )
  end

  desc "publish dev builds"
  lane :publish_dev_ipa do
    generate_dev_ipa
    appcenter_upload_dev
  end


  desc "Publish rls builds"
  lane :publish_rls_ipa do
    generate_rls_ipa
    appcenter_upload_rls
    appstore_rls_ipa
  end

  desc "Run unit tests for sFastIcon iOS App"
  lane :generate_rls_ipa do
    build_app(
      codesigning_identity: "Apple Distribution",
      clean: true,
      scheme: "sFastIcon",
      configuration: "Release",
      export_options: {
        method: "app-store",
        provisioningProfiles: {
          "com.dw4workonly.fastimage" => "DIS_SwiftImageViewer"
        }
      },
      include_bitcode: true,
      include_symbols: true,
      derived_data_path: "fastlane/build",
      output_directory: "fastlane/build"
    )
  end

  lane :appstore_rls_ipa do
    capture_screenshots                  # generate new screenshots for the App Store
    #sync_code_signing(type: "appstore")  # see code signing guide for more information
    upload_to_app_store                  # upload your app to App Store Connect
    slack(message: "Successfully uploaded a new App Store build")
  end

  lane :generate_dev_ipa do
    build_app(
      codesigning_identity: "Apple Development",
      clean: true,
      scheme: "sFastIcon",
      configuration: "Debug",
      export_options: {
        method: "development",
        provisioningProfiles: {
          "com.dw4workonly.fastimage" => "DEV_SwiftImageViewer"
        }
      },
      include_bitcode: false,
      include_symbols: true,
      derived_data_path: "fastlane/build",
      output_directory: "fastlane/build"
    )
  end

  desc "Run unit tests for sFastIcon iOS App"
  lane :test_ios_pra do
    run_tests(
      device: "iPhone 13 Pro",
      scheme: "sFastIconUnitTests",
      code_coverage: true,
      output_directory: "fastlane/test_output",
      result_bundle: true,
      skip_slack: true
    )
  end

  desc "Run simulator tests for sFastIcon iOS App"
  lane :test_ios_qe do
    device = ENV["DEVICE"]
    test_scheme = ENV["TEST_SCHEME"]
    test_plan = ENV["TEST_PLAN"]
    run_tests(
      device: device,
      scheme: test_scheme,
      code_coverage: true,
      output_directory: "fastlane/test_output",
      formatter: "xcpretty-json-formatter",
      skip_slack: true
    )
  end

  desc "Run simulator tests for sFastIcon iOS App"
  lane :upload_to_appstore do
    # Call this lane after performing generate_rls_ipa
    # Placeholder for commands to upload to appstore
  end

  desc "Perform Inspection of Artifacts Bulkextractor"
  lane :run_ios_ins do
    generate_rls_ipa
    ## Call inspection bulkextractor on *.ipa and dSYMS file
    sh 'echo $PWD'
    sh 'echo "Running Bulkextractor inspection"'
    sh 'bulk_extractor -o build/output-ipa -R build/FastImageViewer.ipa'
    sh 'bulk_extractor -o build/output-dsym -R build/FastImageViewer.app.dSYM.zip'
  end

  desc "Generate new localized screenshots for sFastIcon"
  lane :screenshots do
    capture_screenshots(
      devices: ["iPhone 8"],
      scheme: "sFastIconUITests"
    )
  end

  desc "Run Danger for PRA MultiBranch Pipeline Commit to Repo Comments"
  lane :ios_danger_mbp do
    sh 'bundle exec danger --dangerfile=ios_dangerfile_mbp'
  end

  desc "Run Danger for PRA Commit to Repo Comments"
  lane :ios_danger do
    sh 'bundle exec danger --dangerfile=ios_dangerfile'
  end


  desc "Run Slack Testing"
  lane :slack_test do
    build_url = "http://mobileci-prod.local:8080/job/Consumer/job/ImageViewer/job/ImageViewerios/job/PRA/job/IMG-IOS-PRA/201/"
    job_base_name = "TEST-IMG-IOS-PRA"
    build_id = "1"
    run_time = to_clock(4200)
    status = "SUCCESS"
    result = status == "SUCCESS" ? " ðŸš€ finished in" : " ðŸ’£ðŸ’¥failed after "
    message = "*#{status} - <#{build_url}|#{job_base_name} Build ##{build_id}> #{result} #{run_time} <#{build_url+'artifact/fastlane/test_output/report.html'}|#{'Results'}> *"
    slack(
      channel: ENV["SLACK_CHANNEL"],
      message: message,
      username: "cicdbuild",
      success: status,
      default_payloads: []
    )
  end



  desc "Run Slack reporting for PRA"
  lane :post_pra_slack_message do |options|
    build_url = ENV["BUILD_URL"]
    pr_url = ENV["PR_URL"]
    job_base_name = ENV["JOB_BASE_NAME"]
    build_id = ENV["BUILD_ID"]
    run_time = to_clock(options[:run_time])
    status = options[:status]
    result = status == "SUCCESS" ? " ðŸš€ finished in" : " ðŸ’£ðŸ’¥failed after "
    boolean = status == "SUCCESS" ? true : false
    message = "*#{status} - <#{pr_url}|PRA-#{job_base_name} Build ##{build_id}> #{result} #{run_time} <#{build_url+'artifact/fastlane/test_output/report.html'}|#{'Results'}> *"
    slack(
      channel: ENV["SLACK_CHANNEL"],
      message: message,
      username: "cicdbuild",
      success: boolean,
      default_payloads: []
    )
  end

  desc "Run Slack reporting for DEV"
  lane :post_dev_slack_message do |options|
    build_url = ENV["BUILD_URL"]
    job_base_name = ENV["JOB_BASE_NAME"]
    appcenter_url = ENV["APPCENTER_DEV_APP_URL"]
    build_id = ENV["BUILD_ID"]
    run_time = to_clock(options[:run_time])
    status = options[:status]
    result = status == "SUCCESS" ? " ðŸš€ finished in" : " ðŸ’£ðŸ’¥failed after "
    message = "*#{status} - <#{build_url}|#{job_base_name} Build ##{build_id}> #{result} #{run_time} <#{appcenter_url}|#{'AppCenter Results'}>*"
    slack(
      channel: ENV["SLACK_CHANNEL"],
      message: message,
      username: "cicdbuild",
      success: boolean,
      default_payloads: []
    )
  end

  desc "Run Slack reporting for RLS"
  lane :post_rls_slack_message do |options|
    build_url = ENV["BUILD_URL"]
    job_base_name = ENV["JOB_BASE_NAME"]
    appcenter_url = ENV["APPCENTER_RLS_APP_URL"]
    build_id = ENV["BUILD_ID"]
    run_time = to_clock(options[:run_time])
    status = options[:status]
    result = status == "SUCCESS" ? " ðŸš€ finished in" : " ðŸ’£ðŸ’¥failed after "
    message = "*#{status} - <#{build_url}|#{job_base_name} Build ##{build_id}> #{result} #{run_time} <#{appcenter_url}|#{'AppCenter Results'}>*"
    slack(
      channel: ENV["SLACK_CHANNEL"],
      message: message,
      username: "cicdbuild",
      success: boolean,
      default_payloads: []
    )
  end


  desc "Run Slack reporting for QE"
  lane :post_qe_ios_slack_message do |options|
    build_url = ENV["BUILD_URL"]
    job_base_name = ENV["JOB_BASE_NAME"]
    build_id = ENV["BUILD_ID"]
    pwd = ENV["PWD"]
    run_time = to_clock(options[:run_time])
    status = options[:status]
    xcode_project = ENV["XCODE_PROJECT"]
    test_scheme = ENV["TEST_SCHEME"]
    test_plan = ENV["TEST_PLAN"]
    # result = status == "SUCCESS" ? " ðŸš€ finished in" : " ðŸ’£ðŸ’¥failed after "
    # message = "*#{status} - <#{build_url}|#{job_base_name} Build ##{build_id}> #{result} #{run_time} <#{build_url+'artifact/fastlane/test_output/report.html'}|#{'Results'}> *"

    # XML parsing
    output_xml = "#{pwd}/fastlane/test_output/report.junit"
    document = File.open(output_xml) { |f| Nokogiri::XML(f) }
    all_tests = nil
    retry_tests = nil
    succeeded_tests = 0
    percent_tests = 0

    begin
      testsuites = document.at_xpath("testsuites")
      total = nilerize testsuites.attributes("tests")&.value.to_i, 0
      failures = nilerize testsuites.attributes("failures")&.value.to_i, 0
      retries = nilerize testsuites.attributes("retries")&.value.to_i, 0
      successful = total - failures

      if failures.zero?
        success = true
        currentbuild_results = "SUCCESS"
        tests_summary = total == 1 ? " #{total_tests} test was successful.  Build Succeeded." : "#{successful} successful tests.  Build Succeeded."
        tests_summary = total.zero? ? " Zero tests succeeded.  Build Succeeded." : tests_summary
        percent_passed = (successful.to_f / total) * 100.0
        retry_summary = retries.positive? ? " #{percent_passed.round(2)}% of tests succeeded.  Successfully retried #{retries} tests." : " #{percent_passed.round(2)}% of tests passed. No tests retried."
      end

      if failures >= 1
        success = false
        currentbuild_results = "UNSTABLE"
        tests_summary = " #{failures} test(s) failed and #{successful} test(s) succeeded.  Build Succeeded."
        percent_passed = (successful.to_f / total) * 100.0
        retry_summary = retries.positive? ? " #{percent_passed.round(2)}% of tests succeeded.  Successfully retried #{retries} tests." : " #{percent_passed.round(2)}% of tests passed. No tests retried."
      end
    rescue StandardError => e
      UI.important("Failed to extract tests from \"#{output_xml}\: #{e}")
      tests_summary = "Error unable to locate tests summary data."
    end

    if success
      message = [
        "ðŸš€  <#{build_url}|*#{job_base_name} Build ##{build_id}*> completed in *#{run_time}* ðŸš€ ",
        "`#{tests_summary}`",
        "`#{retry_summary}`",
        "*`:white_check_mark: Xcode Scheme: #{test_scheme} #{test_plan}`*",
        "*`:white_check_mark: Xcode Project Build: #{xcode_project}`*",
        "*`:white_check_mark: Xcode Scheme: #{test_scheme} #{test_plan}`*",
        "`#{build_url} artifact/fastlane/test_output/report.html|* Click to see last job test results*>`"
      ].join("\n\t\t")
    else
      begin
        failure_count = document.xpath("//testsuites//failures")
      rescue StandardError => e
        UI.error("Failed to load publish status.")
        tests_summary = "Check earlier errors preventing tests from running."
      end

      qe_build_succeeded = true
      qe_result = qe_build_succeeded
      emoji = ->(value) { value ? ":x:" : ":white_check_mark:" }

      message = [
        "ðŸ’£ðŸ’¥ <#{build_url}|*#{job_base_name} Build ##{build_id}*> completed in *#{run_time}* ðŸ’£ðŸ’¥ ",
        "`#{tests_summary}`",
        "`#{retry_summary}`",
        "*`#{emoji.call(success)} Xcode Scheme: #{test_scheme} #{test_plan}`*",
        "*`#{emoji.call(qe_build_succeeded)} Xcode Project Build: #{xcode_project}`*",
        "*`#{emoji.call(qe_build_succeeded)} Xcode Scheme: #{test_scheme} #{test_plan}`*",
        "`#{build_url} artifact/fastlane/test_output/report.html|* Click to see last job test results*>`"
      ].join("\n\t\t")
    end

    slack(
      channel: ENV["SLACK_CHANNEL"],
      message: message,
      username: "cicdbuild",
      pretext: "iOS Test Job Summary",
      success: success,
      default_payloads: []
    )
  end
end
